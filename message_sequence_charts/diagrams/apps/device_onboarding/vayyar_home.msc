# Device Onboarding - Vayyar Home
# - Connecting and registering a Vayyar Home

msc {
	hscale = "2";

	user [label="User", textcolour="maroon", arctextcolour="maroon"],
	app [label="App", textcolour="maroon", arctextcolour="maroon"],
	server [label="PPC Server", textcolour="navy", arctextcolour="navy"],
	device [label="Device", textcolour="orange", arctextcolour="orange"];
	|||;
	user note device [label="Vayyar Home Device Onboarding", textbgcolor="black", textcolor="white"];
	|||;

	# Open Add Devices menu
	user => app [label="Select '+'"];
	app << app [label="Show Add Items menu"];
	|||;
	user => app [label="Select 'Add Devices'"];
	app => server [label="GET Device Models:\n- brand: $brand"];
	app << server [label="Response:\n- categories: [Category]"];
	app << app [label="Show Add Devices menu"];
	|||;

	# Select Device
	user => app [label="Select 'Entry Sensor'"];
	app => server [label="GET Stories:\n- brand: $brand\n- modelId: $modelId"];
	app << server [label="Response:\n- stories: [Story]"];
	|||;

 	# Show Connection Story
	app << app [label="Show 'Connection' story:\n- storyType: 1"];
	|||;

	# Wait for device discovery
	app note server [label="Wait for new device. Loop every 10 seconds."];
	app => server [label="GET devices:\n -locationId: $locationId"];
	app << server [label="Response:\n- devices: [Device]"];
	|||;

	# Power on device and start discovery
	user => device [label="Connect to power"];
	user => device [label="Start Pairing"];
	device << device [label="Broadcast"];
	user => app [label="Start Discovery"];
	app << app [label="Scan for peripherals"];
	|||;

	# Connect and input Wi-Fi
	app <= device [label="Discovered"];
	app => device [label="Connect"];
	app << device [label="Connected"];
	user => app [label="Input Wi-Fi"];
	app => device [label="Update Wi-Fi"];
	app << device [label="Notify with mac and ip address"];
	|||;

	# Register device
	app note device [label="$deviceId=mac.base64, $deviceType=2000"];
	app => server [label="POST Register Device:\n- deviceId: $deviceId\n- deviceType: $deviceType\n- locationId: $locationId"];
	app << server [label="Response:\n- deviceId: $deviceId\n- deviceTypeId: $deviceTypeId\n- host: $host\n- port: $port\n- useSsl: $useSsl"];
	|||;

	# Configure Cloud
	app => device [label="Update cloud settings"];
	app << device [label="OK"];
	|||;

	# Update Firmware
	app note device [label="Device provides properties Bool hasNewVersion and Int updateVersionCode to describe if a new version is available.  The App should update the device if needed."];
	app => device [label="Check for firmware update"];
	app << device [label="OK"];
	app => device [label="Update if needed"];
	app << device [label="Updated"];
	|||;

	# Reboot and connnect
	app => device [label="Reboot"];
	app << device [label="OK"];
	device << device [label="Reboot and connect to cloud"];
	device => server [label="Connect to mqtt"];
	|||;

	# Device discovered
	app << app [label="Check response for new device:\n- Device.newDevice == true\n- Device.connected == true"];
	app note server [label="New device found"];
	|||;

	# Update new device state
	app => server [label="PUT Update a Device:\n- newDevice: false"];
	app << server [label="Response:\n- resultCode: 0"];
	|||;

 	# Show Connection Success Story
	app << app [label="Show 'Connection Success' story:\n- storyType: 2"];
	user => app [label="Select 'Next'"];
	|||;

	# Show Device Onboarding Configuration Screens
	app note device [label="For more information regarding Bot UIs, see external documentation."];
	app => app [label="Show 'Device Name' UI"];
	user => app [label="Input device name, or leave as default"];
	user => app [label="Select 'Next'"];
	app => server [label="PUT Update a Device:\n- desc: $textfield.text"];
	app << server [label="Response:\n- resultCode: 0"];
	|||;

	# Show Installation Help Story
	app => app [label="Show 'Installation' story:\n- storyType: 4"];
	user note device [label="Setup region and subregion"];
	user => app [label="Select 'Done'"];
	app => app [label="Dismiss Device Onboarding UI"];
	|||;

	user note device [label="Done", textbgcolor="black", textcolor="white"];
}
